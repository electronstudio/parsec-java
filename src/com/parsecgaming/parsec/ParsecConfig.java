package com.parsecgaming.parsec;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ParsecConfig extends Structure {
	/** < `1` enables and maintains UPnP to assist NAT traversal, `0` disables it. */
	public int upnp;
	/** < First port tried for client connections. A value of `0` uses a pseudo random default. */
	public int clientPort;
	/** < First port used to accept host connections. A value of `0` uses a pseudo random default. */
	public int serverPort;
	public ParsecConfig() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("upnp", "clientPort", "serverPort");
	}
	/**
	 * @param upnp < `1` enables and maintains UPnP to assist NAT traversal, `0` disables it.<br>
	 * @param clientPort < First port tried for client connections. A value of `0` uses a pseudo random default.<br>
	 * @param serverPort < First port used to accept host connections. A value of `0` uses a pseudo random default.
	 */
	public ParsecConfig(int upnp, int clientPort, int serverPort) {
		super();
		this.upnp = upnp;
		this.clientPort = clientPort;
		this.serverPort = serverPort;
	}
	public ParsecConfig(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ParsecConfig implements Structure.ByReference {
		
	};
	public static class ByValue extends ParsecConfig implements Structure.ByValue {
		
	};
}

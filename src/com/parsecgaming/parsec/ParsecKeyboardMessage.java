package com.parsecgaming.parsec;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ParsecKeyboardMessage extends Structure {
	/** < `true` if pressed, `false` if released. */
	public byte pressed;
	/**
	 * < `ParsecKeymod` modifier key value.<br>
	 * C type : ParsecKeycode
	 */
	public int code;
	/**
	 * < `ParsecKeycode` value.<br>
	 * C type : ParsecKeymod
	 */
	public int mod;
	public ParsecKeyboardMessage() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("pressed", "code", "mod");
	}
	/**
	 * @param pressed < `true` if pressed, `false` if released.<br>
	 * @param code @see ParsecKeycode<br>
	 * < `ParsecKeymod` modifier key value.<br>
	 * C type : ParsecKeycode<br>
	 * @param mod @see ParsecKeymod<br>
	 * < `ParsecKeycode` value.<br>
	 * C type : ParsecKeymod
	 */
	public ParsecKeyboardMessage(byte pressed, int code, int mod) {
		super();
		this.pressed = pressed;
		this.code = code;
		this.mod = mod;
	}
	public ParsecKeyboardMessage(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ParsecKeyboardMessage implements Structure.ByReference {
		
	};
	public static class ByValue extends ParsecKeyboardMessage implements Structure.ByValue {
		
	};
}

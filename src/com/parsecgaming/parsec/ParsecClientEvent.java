package com.parsecgaming.parsec;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.sun.jna.Union;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ParsecClientEvent extends Structure {
	/**
	 * @see ParsecLibrary.ParsecClientEventType
	 * < Client event type.<br>
	 * C type : ParsecClientEventType
	 */
	public int type;
	/** C type : field1_union */
	public field1_union field1;
	/** <i>native declaration : line 794</i> */
	public static class field1_union extends Union {
		/**
		 * < Cursor mode/image update event.<br>
		 * C type : ParsecClientCursorEvent
		 */
		public ParsecClientCursorEvent cursor;
		/**
		 * < Gamepad rumble data event.<br>
		 * C type : ParsecClientRumbleEvent
		 */
		public ParsecClientRumbleEvent rumble;
		/**
		 * < User-defined host message event.<br>
		 * C type : ParsecClientUserDataEvent
		 */
		public ParsecClientUserDataEvent userData;
		public field1_union() {
			super();
		}
		/**
		 * @param cursor < Cursor mode/image update event.<br>
		 * C type : ParsecClientCursorEvent
		 */
		public field1_union(ParsecClientCursorEvent cursor) {
			super();
			this.cursor = cursor;
			setType(ParsecClientCursorEvent.class);
		}
		/**
		 * @param rumble < Gamepad rumble data event.<br>
		 * C type : ParsecClientRumbleEvent
		 */
		public field1_union(ParsecClientRumbleEvent rumble) {
			super();
			this.rumble = rumble;
			setType(ParsecClientRumbleEvent.class);
		}
		/**
		 * @param userData < User-defined host message event.<br>
		 * C type : ParsecClientUserDataEvent
		 */
		public field1_union(ParsecClientUserDataEvent userData) {
			super();
			this.userData = userData;
			setType(ParsecClientUserDataEvent.class);
		}
		public field1_union(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends field1_union implements Structure.ByReference {
			
		};
		public static class ByValue extends field1_union implements Structure.ByValue {
			
		};
	};
	public ParsecClientEvent() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("type", "field1");
	}
	/**
	 * @param type @see ParsecClientEventType<br>
	 * < Client event type.<br>
	 * C type : ParsecClientEventType<br>
	 * @param field1 C type : field1_union
	 */
	public ParsecClientEvent(int type, field1_union field1) {
		super();
		this.type = type;
		this.field1 = field1;
	}
	public ParsecClientEvent(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ParsecClientEvent implements Structure.ByReference {
		
	};
	public static class ByValue extends ParsecClientEvent implements Structure.ByValue {
		
	};
}

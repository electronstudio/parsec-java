package com.parsecgaming.parsec;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ParsecPermissions extends Structure {
	/** < `1` if the guest can send gamepad input, otherwise `0`. */
	public int gamepad;
	/** < `1` if the guest can send keyboard input, otherwise `0`. */
	public int keyboard;
	/** < `1` if the guest can send mouse button, motion, and wheel input, otherwise `0`. */
	public int mouse;
	public ParsecPermissions() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("gamepad", "keyboard", "mouse");
	}
	/**
	 * @param gamepad < `1` if the guest can send gamepad input, otherwise `0`.<br>
	 * @param keyboard < `1` if the guest can send keyboard input, otherwise `0`.<br>
	 * @param mouse < `1` if the guest can send mouse button, motion, and wheel input, otherwise `0`.
	 */
	public ParsecPermissions(int gamepad, int keyboard, int mouse) {
		super();
		this.gamepad = gamepad;
		this.keyboard = keyboard;
		this.mouse = mouse;
	}
	public ParsecPermissions(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ParsecPermissions implements Structure.ByReference {
		
	};
	public static class ByValue extends ParsecPermissions implements Structure.ByValue {
		
	};
}

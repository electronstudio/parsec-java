package com.parsecgaming.parsec;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class ParsecMetrics extends Structure {
	/**  Average time in milliseconds for the host to encode a frame. */
	public float encodeLatency;
	/**  Average time in milliseconds for the client to decode a frame. */
	public float decodeLatency;
	/**  Average round trip time between the client and host. */
	public float networkLatency;
	public ParsecMetrics() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("encodeLatency", "decodeLatency", "networkLatency");
	}
	/**
	 * @param encodeLatency  Average time in milliseconds for the host to encode a frame.<br>
	 * @param decodeLatency  Average time in milliseconds for the client to decode a frame.<br>
	 * @param networkLatency  Average round trip time between the client and host.
	 */
	public ParsecMetrics(float encodeLatency, float decodeLatency, float networkLatency) {
		super();
		this.encodeLatency = encodeLatency;
		this.decodeLatency = decodeLatency;
		this.networkLatency = networkLatency;
	}
	public ParsecMetrics(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends ParsecMetrics implements Structure.ByReference {
		
	};
	public static class ByValue extends ParsecMetrics implements Structure.ByValue {
		
	};
}
